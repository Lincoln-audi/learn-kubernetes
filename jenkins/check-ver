node {
   def mvnHome
    /*-----------参数变量------------------*/
        // AppVersion="1.0"   //默认版本，无需修改
        label="prd"       //打包参数
        pom_file="ai-ailab/ai-ailab-dubbo/"        //打包是否需要子目录
        testenv="prd"     //测试环境类型（sit1,sit2,sit3,sit4）
        domain="N"         //默认n,需要域名访问请请输入Y
    /*-----------参数变量------------------*/
    //校验版本是否存在
    try {
        sh "/bin/python /app/dockerbuildimage/prd/harbor_app.py ${app_type} ${app_name} ${AppVersion}"
        sh "echo '版本效验通过，任务继续'"
        
    stage('Preparation') {
        flag="${app_type == 'spring-boot' ? 'jar' : 'war'}"   //包类型，无需修改
        checkout([$class: 'GitSCM', branches: [[name: "${Tag}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '001', url: "${git_url}"]]])
        mvnHome = tool 'MAVEN'
   }
  
    stage('MAVEN Build') {
            //构建包
            withEnv(["MVN_HOME=$mvnHome"]) {
            sh "\"$MVN_HOME/bin/mvn\" -f ./ai-ailab -Dmaven.test.skip=true clean package -P ${label} -U"
      }
   }
    
    stage('image build and deploy') {
        jobhome=env.WORKSPACE
        sh "/app/dockerbuildimage/${testenv}/createnewpro.sh ${app_name} ${app_type}"
            //打包镜像
            sh "cp -r \"${jobhome}/${pom_file}target/${app_name}.${flag}\" /app/dockerbuildimage/${testenv}/${app_type}/${app_name}"
            sh "docker build -t xxx.com/${app_type}/${app_name}:${AppVersion} /app/dockerbuildimage/${testenv}/${app_type}/${app_name}/"
            sh "docker push xxx.com/${app_type}/${app_name}:${AppVersion}"
            manager.addBadge('1',"   ${AppVersion}   ",'1')
    //部署
        
        // sh "/app/dockerbuildimage/${testenv}/${app_type}/${app_name}/deploy.sh $AppVersion ${domain}"
		//sh "createnewpro.sh "
   }       
        
        
        
    }catch (exc){
        sh "echo '版本效验通过，任务结束'"
    }

}
